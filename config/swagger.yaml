openapi: "3.0.3"
info:
  title: SharpsBack
  version: "1.0"
  contact:
    email: sharpsbackend@gmail.com

paths:
  /user/blockedDomains:
    post:
      summary: adds a single domain to the user blocked list
      tags:
        - "Blocked Domains"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  $ref: '#/components/schemas/content/properties/url'
      responses:
        '200':
          description: OK
    put:
      summary: sets user blocked domains to the sent array 
      tags:
        - "Blocked Domains"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domains:
                  type: array
                  items:
                    $ref: '#/components/schemas/content/properties/url'
      responses:
        '200':
          description: OK
    get:
      summary: gets user blocked domains list
      tags:
        - "Blocked Domains"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  blockedDomains:
                    type: array
                    items:
                      $ref: '#/components/schemas/content/properties/url'


  /userHistory:
    post:
      summary: creates a userHistory
      description: eventTypes "ENTER" & "EXIT" don't need url. valid eventTypes are in request body schema tab enum
      tags:
        - "User History"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  $ref: '#/components/schemas/content/properties/url'
                eventType:
                  $ref: '#/components/schemas/userHistory/properties/eventType'
      responses:
        '201':
          description: OK
    get:
      summary: gets history of user
      tags:
        - "User History"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userHistory:
                    type: array
                    items:
                      $ref: '#/components/schemas/userHistory'

  /user/savedContents:
    post:
      summary: saves a content for user
      tags:
        - "Content"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  $ref: '#/components/schemas/content/properties/url'
      responses:
        "200":
          description: OK
    get:
      summary: gets paginated user saved contents
      tags:
        - "Content"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          description: number of items to skip (=pages*limit)
          schema:
            type: number
            default: 0
        - in: query
          name: limit
          description: number of returned items
          schema:
            type: number
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/content"
                  total:
                    type: number
    delete:
      summary: removes a saved content
      tags:
        - "Content"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: url
          required: true
          schema:
            $ref: '#/components/schemas/content/properties/url'
      responses:
        "200":
          description: OK

  /content/suggestions:
    put:
      summary: set suggestions
      tags:
        - "Content"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                suggesters:
                  type: array
                  items:
                    type: object
                    properties:
                      userID:
                        type: string
                        format: ObjectId
                      suggestions:
                        type: array
                        items:
                          type: string
                          format: ObjectId
      responses:
        "200":
          description: OK
  
  /test:
    get:
      responses:
        "200":
          description: OK

  /user/suggestions:
    get:
      summary: get user suggestions
      tags:
        - "Content"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          description: number of items to skip (=pages*limit)
          schema:
            type: number
            default: 0
        - in: query
          name: limit
          description: number of returned items
          schema:
            type: number
            default: 10
        - in: query
          name: showAds
          description: show ads or not
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/content"
                  total:
                    type: number

  /user/signup:
    post:
      summary: user signup
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/user"
                - type: object
                  properties:
                    password:
                      type: string
      responses:
        "201":
          description: A verification email is sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/user"
                  token:
                    type: string

  /user/:
    get:
      summary: get user info
      tags:
        - "User"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
    put:
      summary: update user
      tags:
        - "User"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  $ref: "#/components/schemas/user/properties/firstname"
                lastname:
                  $ref: "#/components/schemas/user/properties/lastname"
                password:
                  type: string
                avatar:
                  $ref: "#/components/schemas/user/properties/avatar"
      responses:
        "204":
          description: OK
    delete:
      summary: delete user account
      tags:
        - "User"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                type: string

  /user/login:
    post:
      summary: user login
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/user/properties/email"
                username:
                  $ref: "#/components/schemas/user/properties/username"
                password:
                  type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/user"
                  token:
                    type: string

  /user/logout:
    post:
      summary: logout current session
      tags:
        - "User"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK

  /user/logoutall:
    post:
      summary: logout all sessions
      tags:
        - "User"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK

  /user/resetpassword:
    post:
      summary: request for resetting user password
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/user/properties/email"
      responses:
        "200":
          description: An email is sent if it's an existing verified email

  /user/password:
    put:
      summary: resets user password
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
                token:
                  type: string
      responses:
        '200':
          description: OK


components:
  securitySchemes:
    bearerAuth:
      description: Auth token ( Bearer + " " + Value )
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    user:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        avatar:
          type: string
          format: base64
        username:
          type: string
        email:
          type: string
          format: email
        isVerified:
          type: boolean

    content:
      type: object
      properties:
        url:
          type: string
          format: hostname
        title:
          type: string
        des:
          description: description
          type: string
        image:
          type: string
          format: uri
        tag:
          type: string
        likes:
          type: integer
        clicks:
          type: integer

    userHistory:
      type: object
      required:
        - "user"
        - "content"
        - "eventType"
        - "createdAt"
      properties:
        domain:
          $ref: '#/components/schemas/content/properties/url'
        tag:
          $ref: '#/components/schemas/content/properties/tag'
        eventType:
          type: string
          enum:
            - "CLICK"
            - "LIKE"
            - "UNLIKE"
            - "ENTER"
            - "EXIT"
        createdAt:
          type: string
          format: date-time
